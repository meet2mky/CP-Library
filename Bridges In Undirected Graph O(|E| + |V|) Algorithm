// Created by meet2mky
#include<bits/stdc++.h>
using namespace std;
const int N = 1e5;
vector<int> g[N];
vector<int> tin(N);
vector<int> fup(N);
vector<int> color(N);
int n,m,a,b,t;
set<pair<int,int> > bridges;
void addToList(int u, int v){
    if(u>v)swap(u,v);
    bridges.insert({u,v});
}
void initialize(){
    for(int i=0;i<N;i++){
        g[i].clear();
        fup[i] = tin[i] = color[i] = -1;
    }
    n = m = a = b = t = 0;
    bridges.clear();
}
void read(){
    initialize();
    cin >> n >> m;
    assert(n<N);
    for(int i = 1; i <= m; i++){
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
}
void dfs(int u, int p = -1){
    color[u] = 1;
    fup[u] = tin[u] = ++t;
    for(auto v: g[u]){
        if(v == p)continue;
        if(color[v] == -1){
            dfs(v,u);
            // edge u -> v is a tree edge
            fup[u] = min(fup[u],fup[v]);
            if(fup[v] > tin[u]){
                // There is no back edge from any vertex w in dfs subtree of v to any ancestor of u
                // so it's a bridge
                addToList(u,v);
            }
        }else{
            // it's a back edge
            fup[u] = min(fup[u],tin[v]);
        }
    }
    color[u] = 2;
}
void findBridges(){
    read();    
    for(int i = 1; i <= n; i++){
        if(color[i] == -1){
            dfs(i);
        }
    }
    cout << "Total Bridges: " << (int)bridges.size() << '\n';
    for(auto px: bridges){
        cout << px.first << ' ' << px.second << '\n';
    }
    puts("");
}
int main(){
    findBridges();
    return 0;
}
