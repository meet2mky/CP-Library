#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;
vector<int> prefix_fun(string const& s) {
	int n = (int)s.size();
	vector<int> pi(n);
	pi[0] = 0;
	for (int i = 1; i < n; i++) {
		int j = pi[i - 1];
		while (j > 0 && s[i] != s[j]) {
			j = pi[j - 1];
		}
		if (s[i] == s[j]) {
			j++;
		}
		pi[i] = j;
	}
	return pi;
}
vector<int> count_of_each_prefix(string const& pat, string const& text) {
	string tmp = pat;
	tmp += '#';
	tmp += text;
	int n = (int)pat.size();
	vector<int> pi = prefix_fun(tmp);
	vector<int> ans(n + 1);
	for (int i = n + 1; i < (int)pi.size(); i++) {
		ans[pi[i]]++;
	}
	for (int i = n - 1; i > 0; i--) {
		ans[pi[i - 1]] += ans[i];
	}
	return ans;
}
int main() {
	/* 
		count of prefix of pattern in text
	*/
	cout << "Enter a pattern: "; 
	string pat, text;
	cin >> pat;
	cout << "Enter a  text: ";
	cin >> text;
	vector<int> cnt = count_of_each_prefix(pat, text);
	for (int i = 1; i < (int)cnt.size(); i++) {
		cout << "cnt of prefix of length: " << i << " is: " << cnt[i] << endl;
	}
	return 0;
}
