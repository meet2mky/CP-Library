// created by meet2mky
#include<bits/stdc++.h>
using namespace std;
const int N = 1e5;
vector<int> g[N];
vector<int> tin(N);
vector<int> fup(N);
vector<int> color(N);
int n,m,a,b,t;
set<int> cutVertex;
void initialize(){
    for(int i = 0; i < N; i++){
        g[i].clear();
        fup[i] = tin[i] = color[i] = -1;
    }
    n = m = a = b = t = 0;
    cutVertex.clear();
}
void read(){
    initialize();
    cin >> n >> m;
    assert(n<N);
    for(int i = 1; i <= m; i++){
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
}
void dfs(int u, int p = -1){
    color[u] = 1;
    fup[u] = tin[u] = ++t;
    int children = 0;
    for(auto v: g[u]){
        if(v == p)continue;
        if(color[v] == -1){
            dfs(v,u);
            children++;
            // edge u -> v is a tree edge
            fup[u] = min(fup[u],fup[v]);
            if(fup[v] >= tin[u] && p != -1){
                cutVertex.insert(u);
            }
        }else{
            // it's a back edge
            fup[u] = min(fup[u],tin[v]);
        }
    }
    if(p == -1 && children > 1){
        cutVertex.insert(u);    
    }
    color[u] = 2;
}
void findCutVertex(){
    read();    
    for(int i = 1; i <= n; i++){
        if(color[i] == -1){
            dfs(i);
        }
    }
    cout << "Total Cut vertices: " << (int)cutVertex.size() << '\n';
    for(auto px: cutVertex){
        cout << px << '\n';
    }
    puts("");
}
int main(){
    findCutVertex();
    return 0;
}
