#include<bits/stdc++.h>
using namespace std;
const int N = 1e5; // size
vector<int> fup(N);
vector<int> tin(N);
vector<int> comp_id(N);
vector<int> g[N];
vector<int> color(N);
stack<int> S;
int n,m,a,b,t,sccnum;
void initialize(){
    fill(color.begin(),color.end(),-1);
    fill(tin.begin(),tin.end(),-1);
    fill(fup.begin(),fup.end(),-1);
    fill(comp_id.begin(),comp_id.end(),-1);
    for(int i=0;i<N;i++)g[i].clear();
    while(!S.empty())S.pop();
    n = m = a = b = t = sccnum = 0;
}
void read(){
    initialize();
    cin >> n >> m;
    assert(n<N); // can not have more than N-1 vertices;
    for(int i = 1; i <= m; i++){
        cin >> a >> b;
        g[a].push_back(b);
    }
}
void strongConnect(int u){
    tin[u] = fup[u] = ++t;
    color[u] = 1;
    S.push(u);
    for(auto v: g[u]){
        if(color[v] == -1){
            strongConnect(v);
            fup[u] = min(fup[u],fup[v]);
        }else if( color[v] == 1){
            fup[u] = min(fup[u],tin[v]);
        }
    }
    if(fup[u] == tin[u]){
        puts("");
        // Got a strongly connected component
        ++sccnum;
        int w;
        do{
            w = S.top();
            S.pop();
            color[w] = 2;
            comp_id[w] = sccnum;
            cout << w << ' ';
        }while(w!=u);
    }
    color[u] = 2;
}
void tarjan(){
    read();
    for(int i = 1; i <= n; i++){
        if(color[i] == -1){
            strongConnect(i);    
        }
    }
}
int main(){
    tarjan();
    return 0;
}
